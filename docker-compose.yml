services:
  synka:
    build:
      context: ..
      dockerfile: Synka.Server/Dockerfile
    image: synka:latest
    container_name: synka
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - Database__Provider=Sqlite
      - ConnectionStrings__Sqlite=Data Source=/app/data/synka.db
    volumes:
      # Persist SQLite database
      - synka-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  # Optional: PostgreSQL configuration (comment out synka service above and use this instead)
  # synka-postgres:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   image: synka:latest
  #   container_name: synka
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - Database__Provider=Postgres
  #     - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=synka;Username=synka;Password=ChangeMe123!;Ssl Mode=Prefer
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   restart: unless-stopped

  # postgres:
  #   image: postgres:16-alpine
  #   container_name: synka-postgres
  #   environment:
  #     - POSTGRES_DB=synka
  #     - POSTGRES_USER=synka
  #     - POSTGRES_PASSWORD=ChangeMe123!
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U synka"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

volumes:
  synka-data:
    driver: local
  # postgres-data:
  #   driver: local
